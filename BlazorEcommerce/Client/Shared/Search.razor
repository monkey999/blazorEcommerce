@inject NavigationManager NavigationManager
@inject IProductService ProductService

<div class="input-group">

    <input @bind-value="searchText"
           @bind-value:event="oninput"
           type="search"
           list="products"
           @onkeyup="HandleSearch"
           class="form-control"
           placeholder="Search..."
           @ref="searchInput" 
     />

    <datalist id="products">
        @foreach (var suggestion in suggestions)
        {
            <option>@suggestion</option>
        }
    </datalist>

    <div class="input-group-append" style="margin-left: 10px;">
        <button class="btn btn-primary" @onclick="SearchProducts">
            <span class="oi oi-magnifying-glass"></span>
        </button>
    </div>

</div>

<div class="modal" style="display: @errorDisplay;">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Error</h5>
                <button type="button" class="close" @onclick="CloseError" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p class="text-danger">@errorMessage</p>
            </div>
        </div>
    </div>
</div>

@code {
    private string searchText = string.Empty;
    private List<string> suggestions = new();
    protected ElementReference searchInput;

    private string errorDisplay = "none"; 
    private string errorMessage = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await searchInput.FocusAsync();
        }
    }

    public void SearchProducts()
    {
        if (string.IsNullOrWhiteSpace(searchText))
        {
            errorMessage = "Please enter a product name to search.";
            errorDisplay = "block";
        }
        else
        {
            errorDisplay = "none";
            NavigationManager.NavigateTo($"search/{searchText}/1");
        }
    }

    public async Task HandleSearch(KeyboardEventArgs args)
    {
        if (args.Key == null || args.Key.Equals("Enter")) 
        {
            SearchProducts();
        }
        else if (searchText.Length > 1)
        {
            suggestions = await ProductService.GetProductSearchSuggestions(searchText);
        }
    }

    public void CloseError()
    {
        errorDisplay = "none";
    }
}
