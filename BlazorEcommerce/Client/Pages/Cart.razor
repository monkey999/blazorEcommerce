@page "/cart"
@inject ICartService CartService

<PageTitle>Shopping Cart</PageTitle>

<h3>Shopping Cart</h3>

@if (cartProducts == null || cartProducts.Count == 0)
{
    <span>@message</span>
}
else
{
    <div>
        @foreach (var product in cartProducts)
        {
            <div class="container">
                <div class="image-wrapper">
                    <img src="@product.ImageUrl" class="image" />
                </div>
                <div class="name">
                    <h5><a href="/product/@product.ProductId">@product.Title</a></h5>
                    <span>@product.ProductType</span><br />
                    <input type="number" value="@product.Quantity"
                    @onchange="@((ChangeEventArgs e) => UpdateQuantity(e, product))"
                           class="form-control input-quantity"
                           min="1" />
                    <button class="btn-delete" @onclick="@(() =>
                        RemoveProductFromCart(product.ProductId, product.ProductTypeId))">
                        Delete
                    </button>
                </div>
                <div class="cart-product-price">
                    $@(product.Price * product.Quantity)
                </div>
            </div>
        }
        <div class="cart-product-price">
            Total (@cartProducts.Count): $@cartProducts.Sum(product=> @product.Price * product.Quantity)
        </div>
    </div>
}

@code {
    List<CartProductResponseDTO> cartProducts = null;
    string message = "Loading cart...";

    protected override async Task OnInitializedAsync()
    {
        await LoadCart();
    }

    private async Task RemoveProductFromCart(int productId, int productTypeId)
    {
        await CartService.RemoveProductFromCart(productId, productTypeId);

        await LoadCart();
    }

    private async Task LoadCart()
    {
        var cart = await CartService.GetCartAsync();

        if (cart.Count == 0)
        {
            message = "Your cart is empty.";
            cartProducts = new List<CartProductResponseDTO>();
        }
        else
        {
            cartProducts = await CartService.GetCartProductsAsync();
        }
    }

    private async Task UpdateQuantity(ChangeEventArgs e, CartProductResponseDTO cartProduct)
    {
        cartProduct.Quantity = int.Parse(e.Value.ToString());

        if (cartProduct.Quantity < 1)
        {
            cartProduct.Quantity = 1;
        }

        await CartService.UpdateQuantity(cartProduct);
    }
}
